Steps	Tokens	Types	Line #
2	package	KEY	1
3	a	ID	1
4	;	SS	1
5	package	KEY	2
6	b	ID	2
7	;	SS	2
8	import	KEY	4
9	a.xyz	ID	4
10	;	SS	4
11	import	KEY	4
12	b.c...67	ID	4
13	;	SS	4
14	abstract	KEY	5
15	class	KEY	5
16	{	SS	5
17	val	KEY	6
18	a	ID	6
19	,	SS	6
20	b	ID	6
21	,	SS	6
22	c	ID	6
23	:	SS	6
24	real	KEY	6
25	;	SS	6
26	def	KEY	7
27	1x	Constant follow by none digit or decimal character	7
28	(	SS	7
29	y	ID	7
30	,	SS	7
31	w	ID	7
32	)	SS	7
33	{	SS	7
34	y	ID	7
35	<=	KEY	7
36	w	ID	7
37	;	SS	7
38	}	SS	7
39	;	SS	7
40	while	KEY	8
41	(	SS	8
42	not	KEY	8
43	(	SS	8
44	true	KEY	8
45	or	KEY	8
46	false	KEY	8
47	)	SS	8
48	)	SS	8
49	return	KEY	8
50	(	SS	8
51	47	CONST	8
52	*	SS	8
53	(	SS	8
54	x	ID	8
55	+	SS	8
56	25	CONST	8
57	)	SS	8
58	)	SS	8
59	;	SS	8
60	}	SS	9
61	protected	KEY	10
62	object	KEY	10
63	{	SS	10
64	val	KEY	11
65	i	ID	11
66	,	SS	11
67	j	ID	11
68	,	SS	11
69	k	ID	11
70	:	SS	11
71	int	KEY	11
72	;	SS	11
73	if	KEY	12
74	(	SS	12
75	@	SS	12
76	x	ID	12
77	25.2.5	constant contains more than one decimal point	12
78	)	SS	12
79	case	KEY	12
80	i	ID	12
81	=	SS	12
82	j	ID	12
83	+	SS	12
84	k	ID	12
85	*	SS	12
86	5	CONST	12
87	=>	KEY	12
88	print	KEY	12
89	(	SS	12
90	i	ID	12
91	)	SS	12
92	;	SS	12
93	else	KEY	13
94	in	KEY	13
95	(	SS	13
96	i	ID	13
97	,	SS	13
98	j	ID	13
99	,	SS	13
100	k	ID	13
101	)	SS	13
102	;	SS	13
103	}	SS	14
104	private	KEY	15
105	class	KEY	15
106	{	SS	15
107	val	KEY	16
108	tt	ID	16
109	,	SS	16
110	ff	ID	16
111	:	SS	16
112	bool	KEY	16
113	;	SS	16
114	return	KEY	17
115	(	SS	17
116	tt	ID	17
117	and	KEY	17
118	ff	ID	17
119	or	KEY	17
120	not	KEY	17
121	(	SS	17
122	true	KEY	17
123	)	SS	17
124	)	SS	17
125	;	SS	17
126	}	SS	18
