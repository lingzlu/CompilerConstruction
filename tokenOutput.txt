Steps	Tokens	Types	Line #
1	package	KEY	1
2	a	ID	1
3	;	SS	1
4	package	KEY	2
5	b	ID	2
6	;	SS	2
7	import	KEY	4
8	a.xyz	ID	4
9	;	SS	4
10	import	KEY	4
11	b.c...67	ID	4
12	;	SS	4
13	abstract	KEY	5
14	class	KEY	5
15	{	SS	5
16	val	KEY	6
17	a	ID	6
18	,	SS	6
19	b	ID	6
20	,	SS	6
21	c	ID	6
22	:	SS	6
23	real	KEY	6
24	;	SS	6
25	def	KEY	7
26	x	ID	7
27	(	SS	7
28	y	ID	7
29	,	SS	7
30	w	ID	7
31	)	SS	7
32	{	SS	7
33	y	ID	7
34	<=	KEY	7
35	w	ID	7
36	;	SS	7
37	}	SS	7
38	;	SS	7
39	while	KEY	8
40	(	SS	8
41	not	KEY	8
42	(	SS	8
43	true	KEY	8
44	or	KEY	8
45	false	KEY	8
46	)	SS	8
47	)	SS	8
48	return	KEY	8
49	(	SS	8
50	47	CONST	8
51	*	SS	8
52	(	SS	8
53	x	ID	8
54	+	SS	8
55	25	CONST	8
56	)	SS	8
57	)	SS	8
58	;	SS	8
59	}	SS	9
60	protected	KEY	10
61	object	KEY	10
62	{	SS	10
63	val	KEY	11
64	i	ID	11
65	,	SS	11
66	j	ID	11
67	,	SS	11
68	k	ID	11
69	:	SS	11
70	int	KEY	11
71	;	SS	11
72	if	KEY	12
73	(	SS	12
74	@	SS	12
75	x	ID	12
76	25	CONST	12
77	)	SS	12
78	case	KEY	12
79	i	ID	12
80	=	SS	12
81	j	ID	12
82	+	SS	12
83	k	ID	12
84	*	SS	12
85	5	CONST	12
86	=>	KEY	12
87	print	KEY	12
88	(	SS	12
89	i	ID	12
90	)	SS	12
91	;	SS	12
92	else	KEY	13
93	in	KEY	13
94	(	SS	13
95	i	ID	13
96	,	SS	13
97	j	ID	13
98	,	SS	13
99	k	ID	13
100	)	SS	13
101	;	SS	13
102	}	SS	14
103	private	KEY	15
104	class	KEY	15
105	{	SS	15
106	val	KEY	16
107	tt	ID	16
108	,	SS	16
109	ff	ID	16
110	:	SS	16
111	bool	KEY	16
112	;	SS	16
113	return	KEY	17
114	not	KEY	17
115	(	SS	17
116	true	KEY	17
117	or	KEY	17
118	@	SS	17
119	x	ID	17
120	5	CONST	17
121	)	SS	17
122	and	KEY	17
123	false	KEY	17
124	;	SS	17
125	}	SS	18
